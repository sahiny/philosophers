% Number of robots
N = 35;
% Workspace
numRows = 30;
numCols = 30;
parameters = [...
 5,15,17,28,0.506745;
 3,5,3,5,0.901822;
 16,24,15,18,0.855937;
 15,18,23,22,0.915281;
 26,20,3,26,0.703345;
 2,12,17,0,0.997299;
 7,19,18,21,0.721793;
 2,3,2,20,0.736885;
 29,3,28,1,0.853053;
 18,28,14,24,0.588305;
 24,27,10,22,0.676992;
 25,10,28,23,0.640553;
 24,2,13,9,0.971892;
 19,6,21,28,0.829173;
 8,16,28,2,0.901502;
 25,21,13,23,0.908002;
 28,14,23,8,0.500092;
 21,16,2,2,0.792993;
 9,17,29,12,0.74456;
 10,0,13,3,0.535539;
 10,15,2,22,0.566073;
 10,13,20,16,0.992264;
 18,7,13,7,0.725623;
 20,18,23,2,0.544298;
 29,11,19,0,0.618564;
 26,16,28,19,0.7949;
 25,8,7,0,0.848521;
 12,1,3,0,0.849757;
 23,7,27,17,0.880032;
 4,9,16,0,0.876537;
 0,16,0,3,0.807352;
 24,28,29,6,0.956725;
 28,23,23,9,0.824503;
 7,2,8,19,0.599414;
 15,27,19,20,0.912122;];

% Paths
Paths = cell(35,1);
Paths{1} = [208 209 241 273 305 337 369 401 433 465 497 529 561 593 594 595 596 597 598 599 600 601 602 603 604 605];
Paths{2} = [134];
Paths{3} = [569 537 536 535 534 533 532 531];
Paths{4} = [531 532 564 596 628 660 692 693 694 726 727 728 760 792 791];
Paths{5} = [885 853 854 855 856 857 858 859 827 795 763 731 699 667 635 603 571 539 507 475 443 411 379 347 315 283 251 219 187 155];
Paths{6} = [109 141 140 139 138 137 136 168 167 199 231 263 295 327 359 391 423 455 454 486 485 484 483 515 514 546 578 577];
Paths{7} = [276 308 340 372 404 436 468 500 532 533 534 566 598 630];
Paths{8} = [100 68 69 70 71 72 73 74 75 107 108 109 110 111 112 113 114 115 116 117];
Paths{9} = [964 932 931 930];
Paths{10} = [637 605 573 572 571 570 569 537 505];
Paths{11} = [828 827 826 794 762 730 698 697 665 633 601 569 568 536 504 472 440 439 407 375];
Paths{12} = [843 842 874 906 907 939 940 940 908 909 910 911 912 913 914 915 916 917 949 950 951 952];
Paths{13} = [803 771 739 707 708 709 710 711 712 680 648 616 584 552 520 521 521 489 457 458];
Paths{14} = [647 648 649 650 651 652 653 654 655 656 688 689 690 691 692 693 694 695 696 697 698 730 731 732 733];
Paths{15} = [305 304 303 302 301 300 299 298 330 329 361 393 425 457 489 488 520 520 552 584 616 648 680 712 744 776 808 840 872 904 903 902 901 900 899 931];
Paths{16} = [854 855 823 791 792 760 728 727 695 663 631 632 600 600 600 600 600 600 600 568 568 536 504 472];
Paths{17} = [943 942 910 909 908 908 907 906 874 842 841 809 777];
Paths{18} = [721 720 719 718 717 716 715 683 651 619 587 555 523 491 459 458 457 425 424 423 391 390 389 357 325 293 261 229 197 196 164 132 100 99];
Paths{19} = [338 370 402 434 466 498 497 529 561 560 592 624 656 688 720 752 784 783 815 847 879 878 910 942 974 973];
Paths{20} = [353 385 417 449 450 451 452];
Paths{21} = [368 369 337 338 339 307 275 276 277 245 213 214 182 150 118 119];
Paths{22} = [366 367 367 368 400 432 464 465 466 498 530 562 594 626 625 657 689];
Paths{23} = [616 584 552 520 488 456];
Paths{24} = [691 723 722 721 720 719 718 717 716 715 747 746 745 744 743 742 741 773 772 771];
Paths{25} = [972 940 939 938 937 936 935 934 933 932 931 899 898 866 834 802 770 738 706 674 673 641];
Paths{26} = [881 882 914 946 947 948];
Paths{27} = [841 840 839 838 806 805 804 803 802 770 738 706 674 673 641 609 577 545 513 481 449 417 385 353 321 289 257];
Paths{28} = [418 386 386 386 385 353 321 289 257 225 193 161 129];
Paths{29} = [776 808 808 808 840 872 904 905 937 938 939 940 908 909 910 911 912 913 914];
Paths{30} = [170 202 201 200 199 198 197 229 261 260 292 324 356 388 420 419 418 450 482 514 546 545];
Paths{31} = [49 48 47 46 45 44 43 42 41 40 39 38 37 36];
Paths{32} = [829 861 860 859 858 890 889 888 887 886 885 884 916 915 947 946 945 977 976 975 974 973 972 971 970 969 968 967];
Paths{33} = [952 920 919 918 917 916 915 914 913 881 880 879 847 815 814 782 750 718 717 716 715 747 779 778];
Paths{34} = [259 260 261 262 263 264 265 266 267 299 300 301 302 303 304 305 306 307 308];
Paths{35} = [540 572 571 570 569 568 600 599 598 597 629 661];

for n = 1:35
	y =  floor(Paths{n}/32) - 1;
	x = mod(Paths{n},32) -1;
	Paths{n} = y + x*30 +1;
    p = 2;
%     while p <= length(Paths{n})
%         if Paths{n}(p) == Paths{n}(p-1)
%             Paths{n}(p) = [];
%         else
%             p = p + 1;
%         end
%     end
end
% Init/Final Conditions, Delay Prob
initial_locations = zeros(1,N);
final_locations = zeros(1,N);
for i = 1:N
   initial_locations(i) = Paths{i}(1);
   final_locations(i) = Paths{i}(end);
end
% Obstacles
obstacles = find([;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,;
1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,;
0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,;
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,;
0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,;
0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,;
0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,;
0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,;
0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,;
1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,;
0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,;
0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,;
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,;
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,;
]);
ws = create_workspace(numRows, numCols, obstacles);